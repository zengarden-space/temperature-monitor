worker_processes auto;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stdout main;
    error_log /dev/stderr warn;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Smart caching configuration - using ETag only
    # Enable ETag generation globally (based on file content hash)
    etag on;
    
    # Disable if_modified_since to rely solely on ETag
    if_modified_since off;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://temperature-monitor.zengarden.space;" always;

    server {
        listen 8080;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # ETag-based caching for static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            # Enable ETag generation (nginx automatically generates based on file content and mtime)
            etag on;
            
            # Set reasonable cache time but allow revalidation via ETag
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
            
            # Add Vary header for better caching
            add_header Vary "Accept-Encoding";
            
            try_files $uri =404;
        }

        # ETag-based caching for HTML files (shorter cache time)
        location ~* \.html$ {
            # Enable ETag generation (nginx automatically generates based on file content and mtime)
            etag on;
            
            # Set short cache time but allow revalidation via ETag
            expires 5m;
            add_header Cache-Control "public, must-revalidate";
            
            # Add Vary header for better caching
            add_header Vary "Accept-Encoding";
            
            try_files $uri =404;
        }

        # Handle React Router (SPA routing)
        location / {
            # For the main index.html, use ETag-based caching
            location = / {
                # Enable ETag for index.html
                etag on;
                
                # Very short cache for main entry point
                expires 1m;
                add_header Cache-Control "public, must-revalidate";
                
                # Add Vary header for better caching
                add_header Vary "Accept-Encoding";
                
                try_files /index.html =404;
            }
            
            try_files $uri $uri/ @fallback;
        }

        # Fallback for SPA routing - serve index.html with ETag-based caching
        location @fallback {
            # Enable ETag for index.html (nginx automatically generates based on content)
            etag on;
            
            # Very short cache for SPA fallback
            expires 1m;
            add_header Cache-Control "public, must-revalidate";
            
            # Add Vary header for better caching
            add_header Vary "Accept-Encoding";
            
            try_files /index.html =404;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Security: Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}
